fn display_result(operator : String, left : Any, right : Any, result : Any)
    let output = ""
    if not right then
        output = "({{ operator }}{{ left }}) -> {{ result }}"
    else
        output = "({{ left }} {{ operator }} {{ right }}) -> {{ result }}"
    endif
    print(output)
endfn

let A = 10 # Binary: ...00001010
let B = 3  # Binary: ...00000011
let R = 2147483649 # 0x80000001
let S = 4

display_result("Not (~)", A, null, ~A)
display_result("And (&)", A, B, A & B)
display_result("Or (|)", A, B, A | B)
display_result("Xor (^)", A, B, A ^ B)
display_result("Shift left (<<)", A, 2, A << 2)
display_result("Shift right (>>)", A, 1, A >> 1)
display_result("Nand (~&)", A, B, A ~& B)
display_result("Nor (~|)", A, B, A ~| B)
display_result("Xnor (~^)", A, B, A ~^ B)

# Bitwise rotate functions are not yet implemented.

# let R_rotated_left = R <<< S
# display_result("<<<", R, S, R_rotated_left)

# let R_rotated_right = R >>> S
# display_result(">>>", R, S, R_rotated_right)
