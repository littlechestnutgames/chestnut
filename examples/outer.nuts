###
The following is a demonstration of the outer unary.

The outer unary moves backward in scope skipping one
reference to a given variable.

In the following code, `a` is declared, then shadowed in level_one.
level_one calls level 2, which also shadows `a`.

We are able to retrieve the value in global `a` by using `outer a`
because functions capture their defining scopes.
###

let a = 10 

fn level_two (b : Integer) returns Integer
    shadow a = 30 

    let global_a = outer a
    
    return global_a + a + b
endfn

fn level_one (b : Integer) returns Integer
    shadow a = 20
    
    return level_two(b)
endfn

let final_result = level_one(5)
print("Final result (Expected 45): {{ final_result }}")

